import { w as wrapFetch } from '../shared/srvx.DhN4g5wJ.mjs';

const Response = globalThis.Response;
function serve(options) {
  return new CloudflareServer(options);
}
class CloudflareServer {
  constructor(options) {
    this.runtime = "cloudflare";
    this.options = options;
    const fetchHandler = wrapFetch(
      this,
      this.options.fetch
    );
    this.fetch = (request, env, context) => {
      Object.defineProperties(request, {
        cloudflare: { value: { env, context }, enumerable: true },
        remoteAddress: {
          get: () => void 0,
          enumerable: true
        }
      });
      return fetchHandler(request);
    };
    this.serveOptions = {
      fetch: this.fetch
    };
    if (!options.manual) {
      this.serve();
    }
  }
  serve() {
    addEventListener("fetch", (event) => {
      event.respondWith(this.fetch(event.request, {}, event));
    });
  }
  ready() {
    return Promise.resolve().then(() => this);
  }
  close() {
    return Promise.resolve();
  }
}

export { Response, serve };
