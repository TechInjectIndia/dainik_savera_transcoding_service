import { r as resolveTLSOptions, a as resolvePort } from '../shared/srvx.lC_d9z2b.mjs';
import { w as wrapFetch } from '../shared/srvx.DhN4g5wJ.mjs';
import 'node:fs';

const Response = globalThis.Response;
function serve(options) {
  return new BunServer(options);
}
class BunServer {
  constructor(options) {
    this.runtime = "bun";
    this.bun = {};
    this.options = options;
    const fetchHandler = wrapFetch(this, this.options.fetch);
    this.fetch = (request, server) => {
      Object.defineProperties(request, {
        bun: { value: { server }, enumerable: true },
        remoteAddress: {
          get: () => server?.requestIP(request)?.address,
          enumerable: true
        }
      });
      return fetchHandler(request);
    };
    const tls = resolveTLSOptions(this.options);
    this.serveOptions = {
      hostname: this.options.hostname,
      reusePort: this.options.reusePort,
      port: resolvePort(this.options.port, globalThis.process?.env.PORT),
      ...this.options.bun,
      tls: {
        cert: tls?.cert,
        key: tls?.key,
        passphrase: tls?.passphrase,
        ...this.options.bun?.tls
      },
      fetch: this.fetch
    };
    if (!options.manual) {
      this.serve();
    }
  }
  serve() {
    if (!this.bun.server) {
      this.bun.server = Bun.serve(this.serveOptions);
    }
    return Promise.resolve(this);
  }
  get url() {
    return this.bun?.server?.url.href;
  }
  ready() {
    return Promise.resolve(this);
  }
  close(closeAll) {
    return Promise.resolve(this.bun?.server?.stop(closeAll));
  }
}

export { Response, serve };
